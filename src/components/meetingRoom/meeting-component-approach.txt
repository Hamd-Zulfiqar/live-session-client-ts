import React, { Component, useRef } from "react";
import { withRouter, RouteComponentProps } from "react-router";
import {
  Container,
  Row,
  Col,
  Button,
  ButtonGroup,
  InputGroup,
  FormControl,
} from "react-bootstrap";
import { toast, ToastContainer } from "react-toastify";
import {
  OTSession,
  OTPublisher,
  OTStreams,
  OTSubscriber,
  OTPublisherRef,
  preloadScript,
  OTStreamsProps,
} from "opentok-react";
import {
  Publisher,
  PublisherEventHandlers,
  PublisherProperties,
  Session,
  SessionEventHandlers,
  SubscriberEventHandlers,
  SubscriberProperties,
  SignalEvent,
  VideoElementCreatedEvent,
} from "opentok-react/types/opentok";
import "./meeting.styles.scss";
import "../home/home.css";

import { match } from "react-router-dom";
const apiKey = process.env.REACT_APP_TOKBOX_API_KEY!;

interface MyCompProps extends RouteComponentProps<any> {
  name: string;
  session: string;
  password: string;
  room: string;
  token: string;
}

interface Settings {
  video: boolean;
  audio: boolean;
}

interface Message {
  name: string;
  body: string;
}
interface MyState {
  session: string;
  token: string;
  name: string;
  room: string;
  publisher: any;
  settings: Settings;
  chat: Message[];
  mySession: Session | undefined;
}

class Meeting extends React.Component<MyCompProps, MyState> {
  private publisherProperties: PublisherProperties;
  private publisherEventHandlers: PublisherEventHandlers;
  private subscriberProperties: SubscriberProperties;
  private subscriberEventHandlers: SubscriberEventHandlers;
  private sessionEventHandlers: SessionEventHandlers;

  private publisherParentRef;
  private subscriberParentRef;
  private parentRef;
  private publisher;
  private session: any;

  constructor(props: MyCompProps) {
    super(props);

    const {
      name,
      session: session1,
      password,
      room,
      token,
    } = this.props.location.state as MyCompProps;

    console.log(name, password);

    this.state = {
      session: session1,
      token: token,
      name: name,
      room: password,
      publisher: null,
      settings: {
        audio: true,
        video: true,
      },
      chat: [],
      mySession: undefined,
    };

    this.publisherParentRef = React.createRef<HTMLDivElement>();
    this.subscriberParentRef = React.createRef<HTMLDivElement>();
    this.parentRef = React.createRef<HTMLDivElement>();

    this.publisher = React.createRef<OTPublisherRef>();
    this.session = null;

    this.sessionEventHandlers = {};

    this.publisherProperties = {
      // name: this.state.name,
      // insertMode: "append",

      resolution: "1280x720",
      height: "100%",
      width: "100%",
    };

    this.publisherEventHandlers = {
      streamCreated: (event) => {
        console.log("Publisher stream created!");
        this.showAlert(true, event.stream.name);

        //publisher stream created and setting our session to our state
        this.setState({
          mySession: this.publisher.current?.getPublisher().session,
        });

        this.publisher.current
          ?.getPublisher()
          .element?.parentElement?.classList.add("parent-attr");
      },
      streamDestroyed: (event) => {
        console.log("Publisher stream destroyed!");

        this.props.history.go(-3);
        this.showAlert(false, event.stream.name);
      },

      videoElementCreated: (event) => {
        // event.element.style.height = "100%";
        // event.element.style.width = "100%";

        const markup: string = `<Col className="column-custom col-sm-6 mx-auto d-flex justify-content-center flex-column align-items-center" ref={this.publisherParentRef}>
        </Col>`;

        console.log(markup);

        // this.parentRef.current?.insertAdjacentHTML("afterbegin", markup);

        // this.publisherParentRef.current?.insertAdjacentElement(
        //   "afterbegin",
        //   event.element
        // );
        console.log("videoElement is created");
      },
    };

    this.subscriberProperties = {
      height: "100%",
      width: "100%",
    };

    this.subscriberEventHandlers = {
      videoDisabled: (event) => {
        console.log("Subscriber video disabled!");
      },
      videoEnabled: (event) => {
        console.log("Subscriber video enabled!");
      },
      videoElementCreated: (event) => {
        event.element.style.height = "100%";
        event.element.style.width = "100%";

        const markup: string = `<Col className="column-custom col-sm-6 mx-auto d-flex justify-content-center flex-column align-items-center" ref={this.publisherParentRef}>
        </Col>`;

        this.parentRef.current?.insertAdjacentHTML("afterbegin", markup);

        // this.subscriberParentRef.current?.insertAdjacentElement(
        //   "afterbegin",
        //   event.element
        // );
        console.log("videoElement is created");
      },
    };
    console.log(this.state);
  }

  toggleAudio = () => {
    this.setState({
      settings: {
        audio: !this.state.settings.audio,
        video: this.state.settings.video,
      },
    });
    this.publisher.current
      ?.getPublisher()
      .publishAudio(this.state.settings.audio);
  };

  toggleVideo = () => {
    this.setState({
      settings: {
        audio: this.state.settings.audio,
        video: !this.state.settings.video,
      },
    });
    this.publisher.current
      ?.getPublisher()
      .publishVideo(this.state.settings.video);
  };

  leaveMeeting = () => {
    localStorage.clear();

    //disconnecting from the session here
    this.state.mySession?.disconnect();

    //Redirecting to home page
  };

  showAlert(flag: boolean, name?: string) {
    if (flag) {
      toast.success(name || "Success", {
        position: toast.POSITION.TOP_CENTER,
      });
    } else {
      toast.warn(name || "Warn", {
        position: toast.POSITION.TOP_CENTER,
      });
    }
  }

  display = () => {
    console.log("Publisher:");
    console.log(this.publisher.current?.getPublisher());
    console.log("Publisher from state:");
    console.log(this.state.publisher);

    console.log("Session from member:");
    console.log(this.session);
  };

  displayState = () => {
    console.log(this.state);
  };

  componentDidMount() {
    this.getPublisher();
    // console.log(this.state.mySession);
  }

  componentWillUnmount() {
    localStorage.clear();
  }

  getPublisher = () => {
    // this.publisher.current?.getPublisher().element=this.parentRef.current?
    this.setState({
      publisher: this.publisher.current?.getPublisher(),
    });
  };

  render() {
    return (
      <div className="Room">
        {/* <ToastContainer /> */}
        <OTSession
          apiKey={apiKey}
          sessionId={this.state.session}
          token={this.state.token}
          onConnect={() => {
            console.log("Session.connect completed!");
          }}
          onError={() => {
            console.log("Session.connect failed!");
          }}
        >
          <Container fluid className="custom-container vh-100 vw-100">
            {/* <h3 className="m-3">{this.state.room}</h3> */}

            <Row className="row-participants" ref={this.parentRef}>
              <Col className="column-custom col-sm-6 mx-auto d-flex justify-content-center flex-column align-items-center">
                <OTPublisher
                  properties={{
                    // insertDefaultUI: false,

                    height: "100%",
                    width: "100%",
                  }}
                  eventHandlers={this.publisherEventHandlers}
                  ref={this.publisher}
                />
              </Col>

              {/* <Col className="column-custom col-sm-6 mx-auto d-flex justify-content-center flex-column align-items-center">
                <OTStreams>
                  <OTSubscriber
                    properties={{
                      height: "100%",
                      width: "100%",
                    }}
                    eventHandlers={this.subscriberEventHandlers}
                  />
                </OTStreams>
              </Col> */}

              {/* <Row className="text-center justify-content-md-center">
                  {/* <h2>Subscribers here</h2> */}
              {/* <OTStreams>
                    <OTSubscriber
                      properties={this.subscriberProperties}
                      eventHandlers={this.subscriberEventHandlers}
                    />
                  </OTStreams>
                </Row>
              </Col> */}
            </Row>
          </Container>
        </OTSession>
      </div>
    );
  }
}

export default withRouter(Meeting);
